from snakemake.utils import Paramspace
from snakemake.utils import min_version
import pandas as pd


# Settings --------------------------------------------------------------------

min_version("6.3.0")

shell.executable("bash")

paramspace = Paramspace(pd.read_csv(config['paramspace'], sep="\t"))


configfile: os.path.join(workflow.basedir, "..", ".tests", "config", "config_paramspace.yaml")


workdir: config["workdir"]


# Input rule ------------------------------------------------------------------


rule all:
    input:
        "aggregated/runtime.tsv",
        "aggregated/confusion_matrix.tsv",
        "aggregated/yield.tsv",
        "aggregated/metrics.tsv",
        "aggregated/pr_curve.tsv",


# Workflow --------------------------------------------------------------------


rule create_configs:
    input:
        conffile=config["foodme_config"],
    output:
        conf="foodme_runs/{paramspace.wildcard_pattern}/config.yaml",
    params:
        pspace=config['paramspace'],
    log:
        "logs/config_writer.log"
    script:
        ""


rule run_foodme_benchmark:
    input:
        config="foodme_runs/{paramspace.wildcard_pattern}/config.yaml"
    output:
        runtime="foodme_runs/{paramspace.wildcard_pattern}/runtime.tsv",
        confmat="foodme_runs/{paramspace.wildcard_pattern}/benchmarking/confusion_matrix.tsv",
        yield="foodme_runs/{paramspace.wildcard_pattern}/benchmarking/yield.tsv",
        metrics="foodme_runs/{paramspace.wildcard_pattern}/benchmarking/metrics.tsv",
        pr_curve="foodme_runs/{paramspace.wildcard_pattern}/benchmarking/pr_curve.tsv",
    log:
        "logs/foodme_runs/{paramspace.wildcard_pattern}/snakemake.log"
    shell:
        """
        time start
        exec snakemake
        time end
        """


rule aggregate_metrics:
    input:
        runtime=expand("foodme_runs/{params}/runtime.tsv", params=paramspace.instance_patterns),
        confmat=expand("foodme_runs/{params}benchmarking/confusion_matrix.tsv", params=paramspace.instance_patterns),
        yield=expand("foodme_runs/{params}benchmarking/yield.tsv", params=paramspace.instance_patterns),
        metrics=expand("foodme_runs/{params}benchmarking/metrics.tsv", params=paramspace.instance_patterns),
        pr_curve=expand("foodme_runs/{params}benchmarking/pr_curve.tsv", params=paramspace.instance_patterns),
    output:
        runtime="aggregated/runtime.tsv",
        confmat="aggregated/confusion_matrix.tsv",
        yield="aggregated/yield.tsv",
        metrics="aggregated/metrics.tsv",
        pr_curve="aggregated/pr_curve.tsv",
    params:
        pspace=config['paramspace'],
    log:
        "logs/aggregate_metrics.log"
    shell:
        """
        aggregate all
        """
