import pandas as pd
import os, json, csv, subprocess

shell.executable("bash")

# Sample getter -------------------

def _get_fastq(wildcards,read_pair='fq1'):
    return samples.loc[(wildcards.sample), [read_pair]].dropna()[0]

# Rules ---------------------------

rule run_fastp:
    input:
        r1 = lambda wildcards: _get_fastq(wildcards, 'fq1'),
        r2 = lambda wildcards: _get_fastq(wildcards, 'fq2')
    output:
        r1 = temp("{sample}/trimmed/{sample}_R1.fastq.gz"),
        r2 = temp("{sample}/trimmed/{sample}_R2.fastq.gz"),
        json = "{sample}/trimmed/{sample}.json",
        html = "{sample}/trimmed/{sample}.html"
    params:
        length_required = config["fastp"]["length_required"],
        qualified_quality_phred = config["fastp"]["qualified_quality_phred"],
        window_size = config["fastp"]["window_size"],
        mean_qual = config["fastp"]["mean_quality"],
        primer_F = config["fastp"]["primer_fwd"],
        primer_R = config["fastp"]["primer_rev"],
        primer_trim = "--adapter_fasta " + config["fastp"]["primers_fasta"] if config["fastp"]["primers_fasta"] != "None" else " "
    threads: config["threads_sample"]
    message: "Running fastp on {wildcards.sample}"
    conda: "../envs/fastp.yaml"
    log: 
        "logs/{sample}_fastp.log"
    shell:
        "fastp -i {input.r1} -I {input.r2} -o {output.r1} -O {output.r2} -h {output.html} -j {output.json}\
        --length_required {params.length_required} --qualified_quality_phred {params.qualified_quality_phred} --cut_by_quality3 \
        --cut_window_size {params.window_size} --cut_mean_quality {params.mean_qual} --detect_adapter_for_pe \
        --trim_front1 {params.primer_F} --trim_front2 {params.primer_R} {params.primer_trim} \
        --thread {threads} --report_title 'Sample {wildcards.sample}' > {log} 2>&1"

rule parse_fastp:
    input:
        json = "{sample}/trimmed/{sample}.json",
        html = "{sample}/trimmed/{sample}.html"
    output:
        tsv = "{sample}/reports/{sample}_trimmed.tsv"
    message: "Parsing fastp json report"
    run:
        with open(input.json,'r') as handle:
            data = json.load(handle)
          
        link_path = os.path.join("..", input.html)
        header = "Sample\tTotal reads before\tTotal bases before\tTotal reads after\tTotal bases after\tQ20 rate after\tQ30 rate after\tDuplication rate\tInsert size peak\tlink_to_report"
        datalist = [wildcards.sample, 
                    data["summary"]["before_filtering"]["total_reads"],
                    data["summary"]["before_filtering"]["total_bases"],
                    data["summary"]["after_filtering"]["total_reads"],
                    data["summary"]["after_filtering"]["total_bases"],
                    data["summary"]["after_filtering"]["q20_rate"],
                    data["summary"]["after_filtering"]["q30_rate"],
                    data["duplication"]["rate"],data["insert_size"]["peak"], 
                    link_path]
                    
        with open (output.tsv,"w") as outfile:
            outfile.write(header+"\n")
            writer=csv.writer(outfile, delimiter='\t')
            writer.writerow(datalist) 

rule collect_fastp_stats:
    input:
        expand("{sample}/reports/{sample}_trimmed.tsv", sample=samples.index)
    output:
        "reports/fastp_stats.tsv"
    message: "Collecting fastp stats"
    shell:
        """
        cat {input[0]} | head -n 1 > {output}
        for i in {input}; do 
            cat ${{i}} | tail -n +2 >> {output}
        done
        """